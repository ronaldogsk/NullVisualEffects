// Copyright (C) Ronaldo Veloso. All Rights Reserved.

#pragma once

#include "/Engine/Public/Platform.ush"

struct FluidCell
{
    float2 Velocity;
    float Density;
    uint2 Coords;
    uint ID;
    float Intensity;
};

struct FluidSimulationAddInput
{
    float2 Velocity;
    int2 Coords;
};

uint GetFromCoordsID(uint2 InCoords, uint InSimulationGridSize)
{
    // SV_DispatchThreadID.x * sizeof(FFluidSimulationVertex)
    return ((InCoords.x * InSimulationGridSize) + InCoords.y) * 5;
}

FluidCell GetCell(uint2 InCoords, uint InSimulationGridSize, inout RWBuffer<float> InBuffer)
{
    const uint ID = GetFromCoordsID(InCoords, InSimulationGridSize);

    FluidCell Cell;
    Cell.Velocity = float2(InBuffer[ID + 2], InBuffer[ID + 3]);
    Cell.Density = InBuffer[ID + 4];
    Cell.Coords = InCoords;
    Cell.ID = ID;
    Cell.Intensity = 1.0f;
    return Cell;
}

void GetCellsAccurate(float2 InCoords, uint InSimulationSize, inout RWBuffer<float> InBuffer, out FluidCell OutCells[4])
{
    float2 Frac = frac(InCoords);
    uint2 Raw = uint2(InCoords.x, InCoords.y);

    FluidCell CellOne   = GetCell(Raw, InSimulationSize, InBuffer);
    FluidCell CellTwo   = GetCell(Raw + uint2(0, 1), InSimulationSize, InBuffer);
    FluidCell CellThree = GetCell(Raw + uint2(1, 0), InSimulationSize, InBuffer);
    FluidCell CellFour  = GetCell(Raw + uint2(1, 1), InSimulationSize, InBuffer);

    CellOne.Intensity   = Frac.x;
    CellTwo.Intensity   = Frac.y;
    CellThree.Intensity = 1 - Frac.y;
    CellFour.Intensity  = 1 - Frac.y;

    OutCells[0] = CellOne;
    OutCells[1] = CellTwo;
    OutCells[2] = CellThree;
    OutCells[3] = CellFour;
}

uint2 GetCoords(uint InThreadID, uint InSimulationGridSize)
{
    return uint2(InThreadID / InSimulationGridSize, InThreadID % InSimulationGridSize);
}

FluidCell GetCellFromID(uint InThreadID, uint InSimulationGridSize, inout RWBuffer<float> InBuffer)
{
    const uint2 Coords = GetCoords(InThreadID, InSimulationGridSize);
    return GetCell(Coords, InSimulationGridSize, InBuffer);
}

void UpdateCellData(FluidCell InFluidCell, inout RWBuffer<float> InBuffer)
{
    InBuffer[InFluidCell.ID + 2] = InFluidCell.Velocity.x;
    InBuffer[InFluidCell.ID + 3] = InFluidCell.Velocity.y;
    InBuffer[InFluidCell.ID + 4] = InFluidCell.Density;
}