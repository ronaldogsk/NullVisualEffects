// Copyright (C) Ronaldo Veloso. All Rights Reserved.

#pragma once

#include "/Engine/Public/Platform.ush"

struct FluidCell
{
    float2 Velocity;
    float Density;
    uint2 Coords;
    uint ID;
};

struct FluidSimulationAddInput
{
    float2 Velocity;
    float Density;
    int2 Coords;
};

uint GetFromCoordsID(uint2 InCoords, uint InSimulationGridSize)
{
    // SV_DispatchThreadID.x * sizeof(FFluidSimulationVertex)
    return ((InCoords.y * InSimulationGridSize) + InCoords.x) * 3;
}

FluidCell GetCell(uint2 InCoords, uint InSimulationGridSize, inout RWBuffer<float> InBuffer)
{
    const uint ID = GetFromCoordsID(InCoords, InSimulationGridSize);

    FluidCell Cell;
    Cell.Velocity = float2(InBuffer[ID + 0], InBuffer[ID + 1]);
    Cell.Density = InBuffer[ID + 2];
    Cell.Coords = InCoords;
    Cell.ID = ID;
    return Cell;
}

uint2 GetCoords(uint InThreadID, uint InSimulationGridSize)
{
    return uint2(InThreadID / InSimulationGridSize, InThreadID % InSimulationGridSize);
}

FluidCell GetCellFromID(uint InThreadID, uint InSimulationGridSize, inout RWBuffer<float> InBuffer)
{
    const uint2 Coords = GetCoords(InThreadID, InSimulationGridSize);
    return GetCell(Coords, InSimulationGridSize, InBuffer);
}

void UpdateCellData(FluidCell InFluidCell, inout RWBuffer<float> InBuffer)
{
    InBuffer[InFluidCell.ID + 0] = InFluidCell.Velocity.x;
    InBuffer[InFluidCell.ID + 1] = InFluidCell.Velocity.y;
    InBuffer[InFluidCell.ID + 2] = InFluidCell.Density;
}