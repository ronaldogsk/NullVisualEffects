// Copyright (C) Ronaldo Veloso. All Rights Reserved.

#pragma once

#include "/Engine/Public/Platform.ush"
#include "FluidSimulationCommon.usf"

RWBuffer<float> CurrentFluidData;
RWBuffer<float> PreviousFluidData;
int SimulationGridSize;
float SimulationGridSizeRecip;
float FluidDifusion;
float FluidViscosity;
float DeltaTime;

[numthreads(1, 1, 1)]
void MainCS(uint3 DTid : SV_DispatchThreadID)
{
    const uint CurrentCellID = DTid.x;
    
    FluidCell CurrentCell = GetCellFromID(CurrentCellID, SimulationGridSize, PreviousFluidData);
    const FluidCell UpperCell = GetCell(CurrentCell.Coords + uint2(0, 1), SimulationGridSize, PreviousFluidData);
    const FluidCell BottomCell = GetCell(CurrentCell.Coords + uint2(0, -1), SimulationGridSize, PreviousFluidData);
    const FluidCell LeftCell = GetCell(CurrentCell.Coords + uint2(-1, 0), SimulationGridSize, PreviousFluidData);
    const FluidCell RightCell = GetCell(CurrentCell.Coords + uint2(1, 0), SimulationGridSize, PreviousFluidData);

    float a = DeltaTime * 100.0f * SimulationGridSize * SimulationGridSize;
    for (int i = 0; i < 20; ++i)
    {
        CurrentCell.Velocity = (CurrentCell.Velocity + a * (UpperCell.Velocity + BottomCell.Velocity + LeftCell.Velocity + RightCell.Velocity)) / (1.0f + 4.0f * a);
        
        // Set bounds here.
    }
    UpdateCellData(CurrentCell, CurrentFluidData);
}